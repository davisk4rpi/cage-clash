-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;

-- Enums
DROP TYPE IF EXISTS public."fighterSex";

CREATE TYPE public."fighterSex" AS ENUM (
    'male',
    'female',
);

DROP TYPE IF EXISTS public."fightOutcomeMethodEnum";

CREATE TYPE public."fightOutcomeMethodEnum" AS ENUM (
    'draw',
    'no_contest',
    'decision',
    'knockout',
    'submission',
    'disqualification'
);

DROP TYPE IF EXISTS public."playerRoleEnum";

CREATE TYPE public."playerRoleEnum" AS ENUM (
    'admin',
    'player'
);

DROP TYPE IF EXISTS public."leaguePlayerRoleEnum";

CREATE TYPE public."leaguePlayerRoleEnum" AS ENUM (
    'admin',
    'player'
);

DROP TYPE IF EXISTS public."leagueJoinRequestStatusEnum";

CREATE TYPE public."leagueJoinRequestStatusEnum" AS ENUM (
    'pending',
    'rejected',
    'accepted'
);

DROP TABLE IF EXISTS public.player;

CREATE TABLE IF NOT EXISTS public.player
(
    id bigint generated by default as identity NOT NULL,
    uid text NOT NULL,
    "displayName" text NOT NULL,
    "createdAt" timestamp with time zone default timezone('utc'::text, now()) NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public."fightCard";

CREATE TABLE IF NOT EXISTS public."fightCard"
(
    id bigint generated by default as identity NOT NULL,
    "mainCardStartsAt" timestamp with time zone default timezone('utc'::text, now()) NOT NULL,
    name bigint NOT NULL,
    "createdAt" timestamp with time zone default timezone('utc'::text, now()) NOT NULL,
    "createdBy" bigint NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY ("createdBy") REFERENCES public."player" (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID
);

DROP TABLE IF EXISTS public.fighter;

CREATE TABLE IF NOT EXISTS public.fighter
(
    id bigint generated by default as identity NOT NULL,
    name text NOT NULL,
    "createdAt" timestamp with time zone default timezone('utc'::text, now()) NOT NULL,
    "createdBy" bigint NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY ("createdBy") REFERENCES public."player" (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID
);

DROP TABLE IF EXISTS public.fight;

CREATE TABLE IF NOT EXISTS public.fight
(
    id bigint generated by default as identity NOT NULL,
    "fighter1Id" bigint NOT NULL,
    "fighter2Id" bigint NOT NULL,
    rounds smallint NOT NULL DEFAULT 3,
    sex text NOT NULL,
    weight smallint NOT NULL,
    "isCanceled" boolean NOT NULL DEFAULT false,
    "createdAt" timestamp with time zone default timezone('utc'::text, now()) NOT NULL,
    "createdBy" bigint NOT NULL,
    "updatedAt" timestamp with time zone default timezone('utc'::text, now()) NOT NULL,
    "fightCardId" bigint NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY ("fighter1Id") REFERENCES public.fighter (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID,
    FOREIGN KEY ("fighter2Id") REFERENCES public.fighter (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID,
    FOREIGN KEY ("fightCardId") REFERENCES public."fightCard" (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID,
    FOREIGN KEY ("createdBy") REFERENCES public.player (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID
);

DROP TABLE IF EXISTS public."fightOutcome";

CREATE TABLE IF NOT EXISTS public."fightOutcome"
(
    id bigint generated by default as identity NOT NULL,
    method public."fightOutcomeMethodEnum" NOT NULL,
    round smallint DEFAULT null,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public."fightResult";

CREATE TABLE IF NOT EXISTS public."fightResult"
(
    id bigint generated by default as identity NOT NULL,
    "winningFighterId" bigint NOT NULL,
    "fightId" bigint NOT NULL,
    "fightOutcomeId" bigint NOT NULL,
    "createdAt" timestamp without time zone NOT NULL,
    "createdBy" bigint NOT NULL,
    "updatedAt" timestamp with time zone default timezone('utc'::text, now()) NOT NULL,
    "updatedBy" bigint NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY ("winningFighterId") REFERENCES public.fighter (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID,
    FOREIGN KEY ("fightId") REFERENCES public.fight (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID,
    FOREIGN KEY ("fightOutcomeId") REFERENCES public."fightOutcome" (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID,
    FOREIGN KEY ("createdBy") REFERENCES public.player (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID,
    FOREIGN KEY ("updatedBy") REFERENCES public.player (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID
);

DROP TABLE IF EXISTS public."fightPick";

CREATE TABLE IF NOT EXISTS public."fightPick"
(
    id bigint generated by default as identity NOT NULL,
    "fightId" bigint NOT NULL,
    "winningFighterId" bigint NOT NULL,
    "fightOutcomeId" bigint NOT NULL,
    "playerId" bigint NOT NULL,
    confidence smallint NOT NULL,
    "createdAt" timestamp with time zone default timezone('utc'::text, now()) NOT NULL,
    "createdBy" bigint NOT NULL,
    "updatedAt" timestamp with time zone default timezone('utc'::text, now()) NOT NULL,
    "updatedBy" bigint NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY ("fightId") REFERENCES public.fight (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID,
    FOREIGN KEY ("winningFighterId") REFERENCES public.fighter (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID,
    FOREIGN KEY ("fightOutcomeId") REFERENCES public."fightOutcome" (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID,
    FOREIGN KEY ("playerId") REFERENCES public.player (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID,
    FOREIGN KEY ("createdBy") REFERENCES public.player (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID,
    FOREIGN KEY ("updatedBy") REFERENCES public.player (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID
);

DROP TABLE IF EXISTS public."fightOutcomeScore";

CREATE TABLE IF NOT EXISTS public."fightOutcomeScore"
(
    id bigint generated by default as identity NOT NULL,
    "actFightOutcomeId" bigint NOT NULL,
    "predictedFightOutcomeId" bigint DEFAULT null,
    score smallint NOT NULL,
    PRIMARY KEY (id),
    UNIQUE NULLS NOT DISTINCT ("actFightOutcomeId")
        INCLUDE("predictedFightOutcomeId"),
    FOREIGN KEY ("actFightOutcomeId") REFERENCES public."fightOutcome" (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID,
    FOREIGN KEY ("predictedFightOutcomeId") REFERENCES public."fightOutcome" (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID
);

DROP TABLE IF EXISTS public.league;

CREATE TABLE IF NOT EXISTS public.league
(
    id bigint generated by default as identity NOT NULL,
    name text NOT NULL,
    description text NOT NULL,
    "createdAt" timestamp with time zone default timezone('utc'::text, now()) NOT NULL,
    "updatedAt" timestamp with time zone default timezone('utc'::text, now()) NOT NULL,
    "updatedBy" bigint NOT NULL,
    "createdBy" bigint NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY ("createdBy") REFERENCES public.player (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID,
    FOREIGN KEY ("updatedBy") REFERENCES public.player (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID
);

DROP TABLE IF EXISTS public."leaguePlayer";

CREATE TABLE IF NOT EXISTS public."leaguePlayer"
(
    id bigint generated by default as identity NOT NULL,
    "leagueId" bigint NOT NULL,
    "playerId" bigint NOT NULL,
    role public."leaguePlayerRoleEnum" NOT NULL,
    "createdAt" timestamp with time zone default timezone('utc'::text, now()) NOT NULL,
    "createdBy" bigint NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY ("leagueId") REFERENCES public.league (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID,
    FOREIGN KEY ("playerId") REFERENCES public.player (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID,
    FOREIGN KEY ("createdBy") REFERENCES public.player (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID
);

DROP TABLE IF EXISTS public."leaguePlayerHistory";

CREATE TABLE IF NOT EXISTS public."leaguePlayerHistory"
(
    id bigint generated by default as identity NOT NULL,
    "leaguePlayerId" bigint NOT NULL,
    "createdAt" timestamp with time zone default timezone('utc'::text, now()) NOT NULL,
    "createdBy" bigint NOT NULL,
    type text NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY ("leaguePlayerId") REFERENCES public."leaguePlayer" (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID,
    FOREIGN KEY ("createdBy") REFERENCES public.player (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID
);

DROP TABLE IF EXISTS public."leagueJoinRequest";

CREATE TABLE IF NOT EXISTS public."leagueJoinRequest"
(
    id bigint generated by default as identity NOT NULL,
    "leagueId" bigint NOT NULL,
    status public."leagueJoinRequestStatusEnum" default 'pending' NOT NULL,
    "statusUpdatedAt" timestamp with time zone default timezone('utc'::text, now()) NOT NULL,
    "statusUpdatedBy" bigint NOT NULL,
    "createdAt" timestamp with time zone default timezone('utc'::text, now()) NOT NULL,
    "createdBy" bigint NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY ("leagueId") REFERENCES public.league (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID,
    FOREIGN KEY ("statusUpdatedBy") REFERENCES public.player (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID,
    FOREIGN KEY ("createdBy") REFERENCES public.player (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID
);

DROP TABLE IF EXISTS public."playerRole";

CREATE TABLE IF NOT EXISTS public."playerRole"
(
    id bigint generated by default as identity NOT NULL,
    "playerId" bigint NOT NULL,
    "role" public."playerRoleEnum" NOT NULL,
    "createdAt" timestamp with time zone default timezone('utc'::text, now()) NOT NULL,
    "createdBy" bigint NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY ("playerId") REFERENCES public.player (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID,
    FOREIGN KEY ("createdBy") REFERENCES public.player (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID
);

END;